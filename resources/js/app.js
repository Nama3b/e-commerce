/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
    /******/ 	var __webpack_modules__ = ({

        /***/ "./resources/js/app.js":
        /*!*****************************!*\
          !*** ./resources/js/app.js ***!
          \*****************************/
        /***/ (() => {

            eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\r\n * App's functions\r\n */\njQuery(function () {\n  var table = window.LaravelDataTables[\"dataTable\"];\n  var body = $('body');\n  var $formDelete = $('.modal_delete');\n  var formEdit = $('.modal_edit');\n  var $modalDelete = $('#modal_delete');\n  var $modalEdit = $('#modal_edit');\n  var $resetForm = $('#reset-form');\n  var filterForm = $('#filter');\n  var textarea_ckeditor = $('.textarea_ckeditor');\n  var $statusModal = $('#modal_status');\n  table.on('draw', function () {\n    $('.main-sidebar').height($(document).outerHeight());\n  });\n  body.on('click', '.model_new', function () {\n    $('.modal_edit .modal-title').text(lang.button.add);\n    $(\"#meta_dynamic_append\").empty();\n    $(\"#meta_dynamic_append\").append('<tr><td colspan=\"3\"><button type=\"button\" name=\"add\" id=\"add\" class=\"btn btn-success\">さらに追加</button></td></tr>');\n    formEdit[0].reset();\n    resetCkeditor();\n    resetError();\n    $('.select2-clear').val('').trigger('change');\n    $('.select2-clear').prop('disabled', false);\n    $('.select2-clear option').prop('disabled', false);\n    formEdit.attr('action', \"\".concat(routerPath, \"/store\"));\n    $modalEdit.modal('toggle');\n  });\n  body.on('click', '.inline_edit', function () {\n    var id = $(this).data('id');\n    var url = \"\".concat(routerPath, \"/show/\").concat(id);\n    var url_edit = \"\".concat(routerPath, \"/edit/\").concat(id);\n    $('.select2-clear').prop('disabled', false);\n    resetModalEdit();\n    buildEditForm(url, url_edit);\n    $('.modal_edit .modal-title').text(lang.button.update).append(\"<input id='id-hidden' name='id-model' value=\" + id + \" type='hidden'/>\");\n  });\n  body.on('click', '.inline_copy', function () {\n    var id = $(this).data('id');\n    var url = \"\".concat(routerPath, \"/show/\").concat(id);\n    var url_edit = \"\".concat(routerPath, \"/store\");\n    $('.modal_edit .modal-title').text(lang.button.add).append(\"<input id='id-hidden' name='id-model' value=\" + id + \" type='hidden'/>\");\n    formEdit.attr('action', url_edit).addClass(\"copy\");\n    resetModalEdit();\n    buildEditForm(url, url_edit, true);\n  });\n  body.on('click', '.inline_delete', function () {\n    var id = $(this).data('id');\n    $formDelete.attr('action', \"\".concat(routerPath, \"/delete/\").concat(id));\n    $modalDelete.find('.modal-body').text(lang.button.confirmDelete);\n    $modalDelete.modal('show');\n  });\n  body.on('click', '#save-draft', function () {\n    formEdit.find('input[name=\"status\"]').val(\"DRAFT\");\n  });\n  body.on('click', '#save-public', function () {\n    formEdit.find('input[name=\"status\"]').val(\"PUBLIC\");\n  });\n  formEdit.on('hidden.bs.modal', function () {\n    formEdit[0].reset();\n    $('.modal_edit .select2-clear').val('').trigger('change');\n  });\n  filterForm.on('submit', function (e) {\n    table.draw();\n    e.preventDefault();\n  });\n  formEdit.on('submit', function (e) {\n    var formData = new FormData(this);\n    var action = formData.get('status').toLowerCase();\n    var color = formData.get('color_picker');\n    color && formData.set('color_picker', \"#\".concat(color));\n\n    if (textarea_ckeditor.length > 0) {\n      $.each(textarea_ckeditor, function (index, value) {\n        formData.append(value.name, CKEDITOR.instances[value.name].getData());\n      });\n    }\n\n    $.ajax({\n      type: \"POST\",\n      url: formEdit.attr('action'),\n      data: formData,\n      cache: false,\n      contentType: false,\n      processData: false,\n      success: function success(data) {\n        $('.modal_edit input').removeClass('is-invalid');\n        $modalEdit.modal('hide');\n        handleAjaxSuccess(data, action);\n        table.draw();\n      },\n      error: function error(jqXHR) {\n        failError(jqXHR);\n      }\n    });\n    e.preventDefault();\n  });\n  $formDelete.on('submit', function (e) {\n    e.preventDefault();\n    $.ajax({\n      type: 'DELETE',\n      url: $formDelete.attr('action'),\n      data: $formDelete.serialize(),\n      success: function success(res) {\n        $modalDelete.modal('hide');\n        handleAjaxSuccess(res, 'delete');\n        table.draw();\n      },\n      error: function error() {\n        $modalDelete.modal('hide');\n        fail();\n      }\n    });\n  });\n  $resetForm.on('click', function () {\n    var id = $('#id-hidden').val();\n    formEdit[0].reset();\n    resetError();\n    resetCkeditor();\n    $('.modal_edit .select2-clear').val('').trigger('change');\n\n    if (id) {\n      var url = \"\".concat(routerPath, \"/show/\").concat(id);\n      var url_edit = $modalEdit.attr(\"action\");\n      var isCopy = formEdit.hasClass(\"copy\");\n      resetModalEdit();\n      buildEditForm(url, url_edit, isCopy);\n    }\n  });\n\n  function resetCkeditor() {\n    var textarea_ckeditor = $('.textarea_ckeditor');\n\n    if (textarea_ckeditor.length > 0) {\n      $.each(textarea_ckeditor, function (index, value) {\n        CKEDITOR.instances[value.name].setData('');\n      });\n    }\n  }\n\n  function resetError() {\n    var form_class = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.modal_edit';\n    $(form_class + ' input').removeClass('is-invalid');\n    $(form_class + ' include').removeClass('is-invalid');\n    $(form_class + ' select').removeClass('is-invalid');\n    $(form_class + ' textarea').removeClass('is-invalid');\n    $(form_class + ' .emailHelp').remove();\n    $(form_class + ' .cke').removeClass('is-invalid');\n  }\n\n  function failError(jqXHR) {\n    var form_class = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '.modal_edit';\n\n    if (jqXHR.responseJSON !== undefined) {\n      resetError(form_class);\n      $.each(jqXHR.responseJSON.errors, function (key, value) {\n        $(form_class + ' input[name=\"' + key + '\"]').addClass('is-invalid');\n        $(form_class + ' include[name=\"' + key + '\"]').addClass('is-invalid');\n        $(form_class + ' select[name=\"' + key + '\"]').addClass('is-invalid');\n        $(form_class + ' select[name=\"' + key + '[]\"]').addClass('is-invalid');\n        $(form_class + ' textarea[name=\"' + key + '\"]').addClass('is-invalid');\n        $(form_class + ' .cke_editor_' + key).addClass('form-control is-invalid');\n        $(form_class + ' .select_' + key).after('<small class=\"form-text text-danger emailHelp\">' + value[0] + '</small>');\n        $(form_class + ' .file_' + key).after('<small class=\"form-text text-danger emailHelp\">' + value[0] + '</small>');\n        $(form_class + ' input[name=\"' + key + '\"]').after('<small class=\"form-text text-danger emailHelp\">' + value[0] + '</small>');\n      });\n    } else {\n      fail();\n    }\n  }\n  /**\r\n   * handleAjaxSuccess\r\n   * @param {JSON} data response data object\r\n   * @param {\"draft\" | \"public\" | \"delete\"} action methods of saving post\r\n   * @returns\r\n   */\n\n\n  function handleAjaxSuccess(data, action) {\n    var title = '';\n    var text = '';\n    var $modalTitle = $statusModal.find('.modal-title');\n    var $modalBody = $statusModal.find('.modal-body');\n    updateStatistics(data.data);\n    $statusModal.attr('data-status', 'success');\n\n    switch (action) {\n      case 'draft':\n        title = '成功アラート';\n        text = '内容を下書きに保存しました';\n        break;\n\n      case 'public':\n      case 'delete':\n      default:\n        title = '';\n        text = '';\n        break;\n    }\n\n    if (!title && !text) return;\n    $modalTitle.text(title);\n    $modalBody.text(text);\n    $statusModal.modal('show');\n  }\n\n  function updateStatistics(stat) {\n    if (!stat) return;\n    $('#stat-total').text(stat.count);\n    $('#stat-public').text(stat.count_public);\n    $('#stat-draft').text(stat.count_draft);\n  }\n\n  function fail() {\n    $('body').Toasts('create', {\n      autohide: true,\n      \"class\": 'bg-danger',\n      title: 'お知らせ',\n      body: 'リクエストの処理中にエラーが発生しました。 インターネット接続を確認して、後でもう一度やり直してください。'\n    });\n  }\n  /**\r\n   * buildEditForm\r\n   * @param {string} ajax_url url of item\r\n   * @param {string} url_edit url to submit data\r\n   * @param {boolean} isCopy is Copy action\r\n   */\n\n\n  function buildEditForm(ajax_url, url_edit, isCopy) {\n    $.ajax({\n      type: 'GET',\n      url: ajax_url,\n      success: function success(res) {\n        handleBuildEditFormAjaxSuccess(res.data, isCopy);\n        formEdit.attr('action', url_edit);\n        $modalEdit.modal('show');\n      },\n      error: function error(jqXHR, textStatus, errorThrown) {\n        failError(jqXHR);\n      }\n    });\n  }\n  /**\r\n   * handleEditFormAjaxSuccess\r\n   * @param {{\r\n   *  category_id: number,\r\n   *  description: string,\r\n   *  download_url?: string | null,\r\n   *  meta_description: string,\r\n   *  thumbnail_image: string,\r\n   *  title: string\r\n   * } | { color_picker: string, id: number, name: string, title?: string } | { name: string } | { news_id: number, tags_id: number }} data\r\n   * @param {boolean} isCopy\r\n   */\n\n\n  function handleBuildEditFormAjaxSuccess(data, isCopy) {\n    data.title = isCopy ? \"\".concat(lang.text.copy, \"\\u30FC\").concat(data.title) : data.title;\n    $.each(data, function (index, value) {\n      if (!editor[index]) return;\n\n      switch (editor[index].type) {\n        case 'switch':\n          $('.modal_edit input[name=\"' + index + '\"]').bootstrapSwitch('state', value);\n          break;\n\n        case 'include':\n          editor[index].trigger && $(\".modal_edit input[name=\\\"\".concat(index, \"\\\"]\")).trigger('change');\n\n          switch (editor[index].widget) {\n            case 'select2':\n              if (editor[index].disable) {\n                $(\".modal_edit .select2_\".concat(index)).prop('disabled', true);\n              }\n\n              $(\".modal_edit .select2_\".concat(index)).val(value).trigger('change');\n\n              if (editor[index].remove) {\n                $(\".modal_edit .select2_\".concat(index, \" option[value=\\\"\").concat(res.data[editor[index].remove], \"\\\"]\")).prop('disabled', true).trigger('change');\n              }\n\n              break;\n\n            case 'image':\n              if (isCopy) {\n                $(\".img_\".concat(index)).attr(\"src\", \"\");\n              } else {\n                $(\".img_\".concat(index)).attr(\"src\", value).show().prev().hide();\n              }\n\n              break;\n\n            case 'meta':\n              var i = 0;\n              $(\"#meta_dynamic_append\").empty();\n              $(\"#meta_dynamic_append\").append('<tr><td colspan=\"3\"><button type=\"button\" name=\"add\" id=\"add\" class=\"btn btn-success\">さらに追加</button></td></tr>');\n              $.each(value, function (meta_index, meta_value) {\n                ++i;\n\n                if (meta_value.meta_description != null) {\n                  $(\"#meta_dynamic_append\").append('<tr><td><input type=\"text\" ' + 'name=\"meta_data[' + i + '][btn_title]\" placeholder=\"タイトルを入力\" ' + 'class=\"form-control\" value=\"' + meta_value.btn_title + '\" required /></td>' + '<td><input type=\"text\" name=\"meta_data[' + i + '][description]\" ' + 'placeholder=\"内容を入力\" class=\"form-control\"  ' + 'value=\"' + meta_value.description + '\" required /></td>' + '<td><input type=\"text\" name=\"meta_data[' + i + '][meta_description]\" ' + 'placeholder=\"説明 要約入力\" class=\"form-control\"  ' + 'value=\"' + meta_value.meta_description + '\" /></td>' + '<td><button type=\"button\" class=\"btn btn-danger remove-tr\">消去' + '</button></td></tr> ');\n                  $(\"#meta_dynamic_append_hidden\").val(i);\n                } else {\n                  $(\"#meta_dynamic_append\").append('<tr><td><input type=\"text\" ' + 'name=\"meta_data[' + i + '][btn_title]\" placeholder=\"タイトルを入力\" ' + 'class=\"form-control\" value=\"' + meta_value.btn_title + '\" required /></td>' + '<td><input type=\"text\" name=\"meta_data[' + i + '][description]\" ' + 'placeholder=\"内容を入力\" class=\"form-control\"  ' + 'value=\"' + meta_value.description + '\" required /></td>' + '<td><input type=\"text\" name=\"meta_data[' + i + '][meta_description]\" ' + 'placeholder=\"説明 要約入力\" class=\"form-control\"  ' + 'value=\"\" /></td>' + '<td><button type=\"button\" class=\"btn btn-danger remove-tr\">消去' + '</button></td></tr>');\n                  $(\"#meta_dynamic_append_hidden\").val(i);\n                }\n              });\n              break;\n\n            case 'ckeditor':\n              CKEDITOR.instances[index].setData(value);\n              break;\n\n            case 'date_time_picker':\n            case 'input-hidden':\n            default:\n              $(\".modal_edit input[name=\\\"\".concat(index, \"\\\"]\")).val(value);\n              break;\n          }\n\n          break;\n\n        default:\n          $(\".modal_edit \".concat(editor[index].type, \"[name=\\\"\").concat(index, \"\\\"]\")).val(value);\n          break;\n      }\n    });\n  }\n\n  function resetModalEdit() {\n    resetError('.modal_edit');\n    $('.modal_edit .edit_only').removeClass('d-none');\n    resetCkeditor();\n  }\n});\n/**\r\n * DataTable checkboxes functions\r\n */\n\njQuery(function () {\n  var checkRowsSelector = 'checkRow';\n  var checkAllSelector = 'checkAll';\n  var table = window.LaravelDataTables[\"dataTable\"];\n  var $checkAll, $checkRows, $dtButtons;\n  localStorage.removeItem('checkedRows'); //Remove checked item's data when page loaded\n\n  table.on('init', function () {\n    $checkAll = $(\"#\".concat(checkAllSelector));\n    $checkRows = $(\"[id*=\\\"\".concat(checkRowsSelector, \"\\\"]\"));\n    $dtButtons = $('.dt-buttons');\n    $checkAll.on('click', function (event) {\n      return $checkRows.prop('checked', event.target.checked).trigger('change');\n    });\n    $dtButtons.hide();\n  });\n  table.on('draw', function () {\n    var _localStorage$getItem;\n\n    $checkAll = $(\"#\".concat(checkAllSelector));\n    $checkRows = $(\"[id*=\\\"\".concat(checkRowsSelector, \"\\\"]\"));\n    $dtButtons = $('.dt-buttons');\n    var checkedRows = ((_localStorage$getItem = localStorage.getItem('checkedRows')) === null || _localStorage$getItem === void 0 ? void 0 : _localStorage$getItem.split(',')) || [];\n    checkedRows.length > 0 && checkedRows.forEach(function (id) {\n      $dtButtons.show();\n      $(\"#\".concat(checkRowsSelector, \"-\").concat(id)).prop('checked', true).trigger('change');\n    });\n    setCheckAllProps($checkRows);\n    $checkRows.on('change', function (event) {\n      var checkbox = event.target;\n      checkbox.checked ? checkedRows.push(checkbox.value) : checkedRows.splice(checkedRows.indexOf(checkbox.value), 1);\n      localStorage.setItem('checkedRows', checkedRows.join());\n      setCheckAllProps($checkRows);\n    });\n  });\n\n  var setCheckAllProps = function setCheckAllProps(rows) {\n    var $checkedRows = $(\"[id*=\\\"\".concat(checkRowsSelector, \"\\\"]:checked\"));\n    var status = {\n      disabled: rows.length == 0,\n      checked: false,\n      indeterminate: false\n    };\n    status.checked = !status.disabled && $checkedRows.length == rows.length;\n    status.indeterminate = $checkedRows.length > 0 && $checkedRows.length < rows.length;\n\n    if (status.checked || status.indeterminate) {\n      $dtButtons.show(300);\n    } else {\n      $dtButtons.hide(300);\n    }\n\n    $checkAll.prop(status);\n  };\n});\n/**\r\n * Color picker function\r\n */\n\njQuery(function () {\n  var $modalEdit = $('#modal_edit');\n  var $colorPicker = $('.input-color_picker');\n  var $colorPickerInput = $('.input-color_picker-input');\n  var $colorPickerValue = $('.input-color_picker-value');\n  $colorPickerInput.colorpicker({\n    useAlpha: false\n  });\n  $modalEdit.on('shown.bs.modal', function () {\n    var defaultColor = $colorPickerValue.val();\n    $colorPickerInput.val(defaultColor).trigger('colorpickerChange');\n  });\n  $colorPickerInput.on('colorpickerChange', function (event) {\n    var color = event.color ? event.color.toString() : event.target.value;\n    $colorPicker.children().css({\n      'background-color': color\n    });\n    $colorPickerValue.val(color.replace('#', ''));\n  });\n});\n/**\r\n * Image selector function\r\n */\n\njQuery(function () {\n  var $formEdit = $('.modal_edit');\n  var $customImage = $formEdit.find('.custom-image');\n  var $customThumbnail = $formEdit.find('.custom-thumbnail');\n  var $inputFiles_thumbnail = $customThumbnail.find('input');\n  var $placeholder_thumbnail = $customThumbnail.find('.select-image > .placeholder');\n  var $img_thumbnail = $customThumbnail.find('.select-image > img');\n  var $inputFiles = $customImage.find('input');\n  var $placeholder = $customImage.find('.select-image > .placeholder');\n  var $img = $customImage.find('.select-image > img');\n  $inputFiles_thumbnail.on('change', function (event) {\n    var _event$target$files = _slicedToArray(event.target.files, 1),\n        file = _event$target$files[0];\n\n    if (!file) return;\n    $img_thumbnail.show().attr({\n      src: URL.createObjectURL(file),\n      alt: file.name\n    });\n    $placeholder_thumbnail.hide();\n  });\n  $formEdit.on('reset', function (e) {\n    $inputFiles_thumbnail.trigger('change');\n    $img_thumbnail.hide().attr({\n      src: '',\n      alt: ''\n    });\n    $placeholder_thumbnail.show();\n  });\n  $inputFiles.on('change', function (event) {\n    var _event$target$files2 = _slicedToArray(event.target.files, 1),\n        file = _event$target$files2[0];\n\n    if (!file) return;\n    $img.show().attr({\n      src: URL.createObjectURL(file),\n      alt: file.name\n    });\n    $placeholder.hide();\n  });\n  $formEdit.on('reset', function (e) {\n    $inputFiles.trigger('change');\n    $img.hide().attr({\n      src: '',\n      alt: ''\n    });\n    $placeholder.show();\n  });\n});\n/**\r\n * Input clear value\r\n */\n\njQuery(function () {\n  /**\r\n   * clearInputValue\r\n   * @param {SVGElement} button\r\n   * @param {HTMLElement} input\r\n   * @returns\r\n   */\n  var clearInputValue = function clearInputValue(button, input) {\n    input.value = null;\n    input.focus();\n    $(button).css('display', 'none');\n  };\n  /**\r\n   * showButtonClear\r\n   * @param {SVGElement} button\r\n   * @param {HTMLElement} input\r\n   * @returns\r\n   */\n\n\n  var showButtonClear = function showButtonClear(button, input) {\n    $(button).css('display', input.value.length > 0 ? 'block' : 'none');\n  };\n\n  var buttonClear = $('.btn-clear-input');\n  buttonClear.each(function () {\n    var _this = this;\n\n    var input = this.nextElementSibling;\n    if (input.tagName !== \"INPUT\") return;\n    if (input.type !== \"text\") return;\n    $(this).on('click', function (_) {\n      return clearInputValue(_this, input);\n    });\n    $(input).on('input', function (_) {\n      return showButtonClear(_this, input);\n    });\n  });\n});\n/**\r\n * jQuery DataTable's custom plugins\r\n */\n\n(function () {\n  var previousClassName = 'previous';\n  var nextClassName = 'next';\n  var paginateClassName = 'pagination';\n  var paginateInputClassName = 'form-control';\n  var paginateTotalClassName = 'paginate_total';\n\n  function calcDisableClasses(oSettings) {\n    var start = oSettings._iDisplayStart;\n    var length = oSettings._iDisplayLength;\n    var visibleRecords = oSettings.fnRecordsDisplay();\n    var all = length === -1; // Gordey Doronin: Re-used this code from main jQuery.dataTables source code. To be consistent.\n\n    var page = all ? 0 : Math.ceil(start / length);\n    var pages = all ? 1 : Math.ceil(visibleRecords / length);\n    var disableFirstPrevClass = page > 0 ? '' : oSettings.oClasses.sPageButtonDisabled;\n    var disableNextLastClass = page < pages - 1 ? '' : oSettings.oClasses.sPageButtonDisabled;\n    return {\n      'previous': disableFirstPrevClass,\n      'next': disableNextLastClass\n    };\n  }\n\n  function calcCurrentPage(oSettings) {\n    return Math.ceil(oSettings._iDisplayStart / oSettings._iDisplayLength) + 1;\n  }\n\n  function calcPages(oSettings) {\n    return Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength);\n  }\n\n  $.fn.dataTableExt.oPagination.input = {\n    fnInit: function fnInit(oSettings, nPaging, fnCallbackDraw) {\n      var nPrevious = document.createElement('a');\n      var nNext = document.createElement('a');\n      var nInput = document.createElement('input');\n      var nTotal = document.createElement('span');\n      var nInfo = document.createElement('span');\n      var nButtons = document.createElement('ul');\n      var nPreviousLi = document.createElement('li');\n      var nNextLi = document.createElement('li');\n      var language = oSettings.oLanguage.oPaginate;\n      var classes = oSettings.oClasses;\n      var info = 'ページ _INPUT_ の _TOTAL_';\n      nPrevious.innerHTML = language.sPrevious;\n      nNext.innerHTML = language.sNext;\n      nButtons.className = paginateClassName;\n      nPreviousLi.className = previousClassName + ' ' + classes.sPageButton;\n      nNextLi.className = nextClassName + ' ' + classes.sPageButton;\n      nPrevious.className = 'page-link';\n      nNext.className = 'page-link';\n      nPrevious.href = 'javascript:void(0);';\n      nNext.href = 'javascript:void(0);';\n      nInput.className = \"\".concat(paginateInputClassName, \" form-control-sm mx-2\");\n      nTotal.className = \"\".concat(paginateTotalClassName);\n      nInfo.className = 'paginate-info mr-4';\n\n      if (oSettings.sTableId) {\n        nPaging.id = \"\".concat(oSettings.sTableId, \"_\").concat(paginateClassName);\n        nPreviousLi.id = \"\".concat(oSettings.sTableId, \"_\").concat(previousClassName);\n        nNextLi.id = \"\".concat(oSettings.sTableId, \"_\").concat(nextClassName);\n      }\n\n      nInput.type = 'text';\n      info = info.replace(/_INPUT_/g, nInput.outerHTML);\n      info = info.replace(/_TOTAL_/g, nTotal.outerHTML);\n      nInfo.innerHTML = info;\n      nPreviousLi.appendChild(nPrevious);\n      nNextLi.appendChild(nNext);\n      nButtons.append(nPreviousLi, nNextLi);\n      nPaging.appendChild(nInfo);\n      nPaging.appendChild(nButtons);\n      $(nPrevious).on('click', function () {\n        var iCurrentPage = calcCurrentPage(oSettings);\n\n        if (iCurrentPage !== 1) {\n          oSettings.oApi._fnPageChange(oSettings, 'previous');\n\n          fnCallbackDraw(oSettings);\n        }\n      });\n      $(nNext).on('click', function () {\n        var iCurrentPage = calcCurrentPage(oSettings);\n\n        if (iCurrentPage !== calcPages(oSettings)) {\n          oSettings.oApi._fnPageChange(oSettings, 'next');\n\n          fnCallbackDraw(oSettings);\n        }\n      });\n      $(nPaging).find(\".\".concat(paginateInputClassName)).on('keyup', function (e) {\n        if (e.keyCode === 13) {\n          $(this).trigger('focusout');\n        }\n      });\n      $(nPaging).find(\".\".concat(paginateInputClassName)).on('focusout', function () {\n        if (this.value === '' || this.value.match(/[^0-9]/)) {\n          /* Nothing entered or non-numeric character */\n          this.value = this.value.replace(/[^\\d]/g, ''); // don't even allow anything but digits\n\n          return;\n        }\n\n        var iNewStart = oSettings._iDisplayLength * (this.value - 1);\n\n        if (iNewStart < 0) {\n          iNewStart = 0;\n        }\n\n        if (iNewStart >= oSettings.fnRecordsDisplay()) {\n          iNewStart = (Math.ceil(oSettings.fnRecordsDisplay() / oSettings._iDisplayLength) - 1) * oSettings._iDisplayLength;\n        }\n\n        oSettings._iDisplayStart = iNewStart;\n        oSettings.oInstance.trigger(\"page.dt\", oSettings);\n        fnCallbackDraw(oSettings);\n      });\n    },\n    fnUpdate: function fnUpdate(oSettings) {\n      if (!oSettings.aanFeatures.p) return;\n      var iPages = calcPages(oSettings);\n      var iCurrentPage = calcCurrentPage(oSettings);\n      var disableClasses = calcDisableClasses(oSettings);\n      var an = oSettings.aanFeatures.p; // hide paging when we can't page\n\n      if (iPages <= 1) {\n        $(an).hide();\n        return;\n      }\n\n      $(an).show(); // Enable/Disable `prev` button.\n\n      $(an).find(\".\".concat(previousClassName)).removeClass(oSettings.oClasses.sPageButtonDisabled).addClass(disableClasses[previousClassName]); // Enable/Disable `next` button.\n\n      $(an).find(\".\".concat(nextClassName)).removeClass(oSettings.oClasses.sPageButtonDisabled).addClass(disableClasses[nextClassName]); // Paginate of N pages text\n\n      $(an).find(\".\".concat(paginateTotalClassName)).text(iPages); // Current page number input value\n\n      $(an).find(\".\".concat(paginateInputClassName)).val(iCurrentPage);\n    }\n  };\n  /**\r\n   * Remove selected row(s)\r\n   */\n\n  var handleRemoveSelected = function handleRemoveSelected() {\n    var _localStorage$getItem2;\n\n    var $modalDelete = $('#modal_delete');\n    var $formDelete = $('.modal_delete');\n    var checkedRows = ((_localStorage$getItem2 = localStorage.getItem('checkedRows')) === null || _localStorage$getItem2 === void 0 ? void 0 : _localStorage$getItem2.split(',')) || [];\n    var url_delete = \"\".concat(routerPath, \"/deleteAll/\").concat(checkedRows);\n    $formDelete.attr('action', url_delete);\n    $modalDelete.find('.modal-body').text(lang.button.confirmDeleteMulti);\n    $modalDelete.modal('show');\n  };\n\n  $.fn.dataTable.ext.buttons.remove = {\n    text: \"<svg class=\\\"mr-2\\\" width=\\\"20\\\" height=\\\"20\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n        <rect fill=\\\"#F3F7FE\\\" width=\\\"20\\\" height=\\\"20\\\" rx=\\\"4\\\"/>\\n        <path stroke=\\\"currentColor\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M14.8833 8.31213C14.8833 8.31213 14.5213 12.8021 14.3113 14.6935C14.2113 15.5968 13.6533 16.1261 12.7393 16.1428C10.9999 16.1741 9.25861 16.1761 7.51994 16.1395C6.64061 16.1215 6.09194 15.5855 5.99394 14.6981C5.78261 12.7901 5.42261 8.31213 5.42261 8.31213\\\" />\\n        <path stroke=\\\"currentColor\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M15.8056 6.15981H4.50024\\\" />\\n        <path stroke=\\\"currentColor\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" d=\\\"M13.6271 6.1598C13.1038 6.1598 12.6531 5.7898 12.5505 5.27713L12.3885 4.46647C12.2885 4.09247 11.9498 3.8338 11.5638 3.8338H8.7418C8.3558 3.8338 8.01713 4.09247 7.91713 4.46647L7.75513 5.27713C7.65247 5.7898 7.2018 6.1598 6.67847 6.1598\\\" />\\n        </svg><span>\".concat(lang.button.deleteText, \"</span>\"),\n    action: function action(_) {\n      return handleRemoveSelected();\n    },\n    className: 'btn btn-sm btn-outline-input btn-outline-hover-orange text-gray-3'\n  };\n  $(document).on('click', 'body #add', function () {\n    var i = $('#meta_dynamic_append_hidden').val();\n    ++i;\n    console.log(i);\n    $(\"body #meta_dynamic_append\").append('<tr><td><input type=\"text\" name=\"meta_data[' + i + '][btn_title]\" placeholder=\"タイトルを入力\" class=\"form-control\" required /></td>' + '<td><input type=\"text\" name=\"meta_data[' + i + '][description]\" placeholder=\"内容を入力\" class=\"form-control\" required /></td>' + '<td><input type=\"text\" name=\"meta_data[' + i + '][meta_description]\" placeholder=\"説明 要約入力\" class=\"form-control\" /></td>' + '<td><button type=\"button\" class=\"btn btn-danger remove-tr\">消去</button></td></tr>');\n    $('#meta_dynamic_append_hidden').val(i);\n  });\n  $(document).on('click', 'body .remove-tr', function () {\n    $(this).parents('tr').remove();\n  });\n})(jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/app.js\n");

            /***/ }),

        /***/ "./resources/sass/app.scss":
        /*!*********************************!*\
          !*** ./resources/sass/app.scss ***!
          \*********************************/
        /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

            "use strict";
            eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc2Fzcy9hcHAuc2Nzcz9hODBiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/sass/app.scss\n");

            /***/ })

        /******/ 	});
    /************************************************************************/
    /******/ 	// The module cache
    /******/ 	var __webpack_module_cache__ = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
        /******/ 		// Check if module is in cache
        /******/ 		var cachedModule = __webpack_module_cache__[moduleId];
        /******/ 		if (cachedModule !== undefined) {
            /******/ 			return cachedModule.exports;
            /******/ 		}
        /******/ 		// Create a new module (and put it into the cache)
        /******/ 		var module = __webpack_module_cache__[moduleId] = {
            /******/ 			// no module.id needed
            /******/ 			// no module.loaded needed
            /******/ 			exports: {}
            /******/ 		};
        /******/
        /******/ 		// Execute the module function
        /******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Return the exports of the module
        /******/ 		return module.exports;
        /******/ 	}
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = __webpack_modules__;
    /******/
    /************************************************************************/
    /******/ 	/* webpack/runtime/chunk loaded */
    /******/ 	(() => {
        /******/ 		var deferred = [];
        /******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
            /******/ 			if(chunkIds) {
                /******/ 				priority = priority || 0;
                /******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
                /******/ 				deferred[i] = [chunkIds, fn, priority];
                /******/ 				return;
                /******/ 			}
            /******/ 			var notFulfilled = Infinity;
            /******/ 			for (var i = 0; i < deferred.length; i++) {
                /******/ 				var [chunkIds, fn, priority] = deferred[i];
                /******/ 				var fulfilled = true;
                /******/ 				for (var j = 0; j < chunkIds.length; j++) {
                    /******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
                        /******/ 						chunkIds.splice(j--, 1);
                        /******/ 					} else {
                        /******/ 						fulfilled = false;
                        /******/ 						if(priority < notFulfilled) notFulfilled = priority;
                        /******/ 					}
                    /******/ 				}
                /******/ 				if(fulfilled) {
                    /******/ 					deferred.splice(i--, 1)
                    /******/ 					var r = fn();
                    /******/ 					if (r !== undefined) result = r;
                    /******/ 				}
                /******/ 			}
            /******/ 			return result;
            /******/ 		};
        /******/ 	})();
    /******/
    /******/ 	/* webpack/runtime/hasOwnProperty shorthand */
    /******/ 	(() => {
        /******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
        /******/ 	})();
    /******/
    /******/ 	/* webpack/runtime/make namespace object */
    /******/ 	(() => {
        /******/ 		// define __esModule on exports
        /******/ 		__webpack_require__.r = (exports) => {
            /******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
                /******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                /******/ 			}
            /******/ 			Object.defineProperty(exports, '__esModule', { value: true });
            /******/ 		};
        /******/ 	})();
    /******/
    /******/ 	/* webpack/runtime/jsonp chunk loading */
    /******/ 	(() => {
        /******/ 		// no baseURI
        /******/
        /******/ 		// object to store loaded and loading chunks
        /******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
        /******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
        /******/ 		var installedChunks = {
            /******/ 			"/admin/js/app": 0,
            /******/ 			"admin/vendor/adminlte/dist/css/adminlte.min": 0
            /******/ 		};
        /******/
        /******/ 		// no chunk on demand loading
        /******/
        /******/ 		// no prefetching
        /******/
        /******/ 		// no preloaded
        /******/
        /******/ 		// no HMR
        /******/
        /******/ 		// no HMR manifest
        /******/
        /******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
        /******/
        /******/ 		// install a JSONP callback for chunk loading
        /******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
            /******/ 			var [chunkIds, moreModules, runtime] = data;
            /******/ 			// add "moreModules" to the modules object,
            /******/ 			// then flag all "chunkIds" as loaded and fire callback
            /******/ 			var moduleId, chunkId, i = 0;
            /******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
                /******/ 				for(moduleId in moreModules) {
                    /******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
                        /******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
                        /******/ 					}
                    /******/ 				}
                /******/ 				if(runtime) var result = runtime(__webpack_require__);
                /******/ 			}
            /******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
            /******/ 			for(;i < chunkIds.length; i++) {
                /******/ 				chunkId = chunkIds[i];
                /******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
                    /******/ 					installedChunks[chunkId][0]();
                    /******/ 				}
                /******/ 				installedChunks[chunkId] = 0;
                /******/ 			}
            /******/ 			return __webpack_require__.O(result);
            /******/ 		}
        /******/
        /******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
        /******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
        /******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
        /******/ 	})();
    /******/
    /************************************************************************/
    /******/
    /******/ 	// startup
    /******/ 	// Load entry module and return exports
    /******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
    /******/ 	__webpack_require__.O(undefined, ["admin/vendor/adminlte/dist/css/adminlte.min"], () => (__webpack_require__("./resources/js/app.js")))
    /******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["admin/vendor/adminlte/dist/css/adminlte.min"], () => (__webpack_require__("./resources/sass/app.scss")))
    /******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
    /******/
    /******/ })()
;
